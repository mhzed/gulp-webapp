// Generated by CoffeeScript 1.8.0
(function() {
  var fs, gulp, gulpFileDst, less, minFile, minifyCSS, minifyJs, path, rename, resFile, through;

  fs = require("fs");

  path = require("path");

  through = require("through2");

  gulp = require("gulp");

  gulpFileDst = require("gulp-filedst");

  minifyCSS = require('gulp-minify-css');

  minifyJs = require('gulp-uglify');

  less = require('gulp-less');

  rename = require("gulp-rename");

  minFile = function(fp) {
    var ext;
    ext = path.extname(fp);
    return path.dirname(fp) + "/" + path.basename(fp, ext) + ".min" + ext;
  };

  resFile = function(attr, rel) {
    var relative, srcfile;
    if (rel[0] === '/') {
      srcfile = path.join(attr._vfile.base, rel);
      relative = rel.slice(1);
    } else {
      srcfile = path.resolve(path.dirname(attr._vfile.path), rel);
      relative = srcfile.slice(attr._vfile.base.length);
    }
    return [srcfile, relative];
  };

  module.exports = function(dstBaseDir, opts) {
    var _memory;
    _memory = {};
    return through.obj(function(attr, unused, cb) {
      var dst, mfile, minifier, param, pipe, relative, srcfile, task, _ref, _ref1;
      if (!attr.gulp) {
        return cb(null, attr);
      }
      _ref = resFile(attr, attr._link), srcfile = _ref[0], relative = _ref[1];
      if (srcfile in _memory) {
        return cb();
      }
      _memory[srcfile] = 1;
      pipe = gulp.src(srcfile);
      dst = gulp.dest(path.dirname(path.resolve(dstBaseDir, relative)));
      _ref1 = attr.gulp;
      for (task in _ref1) {
        param = _ref1[task];
        switch (task) {
          case 'min':
            mfile = minFile(srcfile);
            if (fs.existsSync(mfile)) {
              pipe = gulp.src(mfile).pipe(rename(path.basename(srcfile)));
            } else {
              if (attr.href) {
                minifier = minifyCSS();
              } else {
                minifier = minifyJs();
              }
              pipe = pipe.pipe(minifier);
            }
            break;
          case 'less':
            pipe = pipe.pipe(less());
            break;
          case 'cp':
            pipe = pipe;
            break;
          case 'cat':
            (function(_this) {
              return (function() {
                var fp, _ref2;
                _ref2 = resFile(attr, param), fp = _ref2[0], relative = _ref2[1];
                return dst = gulpFileDst(path.resolve(dstBaseDir, relative));
              });
            })(this)();
            break;
          case 'skip':
            dst = through.obj();
            break;
          default:
            console.log("Ignore unknow task " + task);
        }
      }
      return pipe.pipe(dst).on('finish', function() {
        return cb(null, attr);
      });
    });
  };

}).call(this);

//# sourceMappingURL=gulp-buildapp.js.map
